//
// CinderMain: a base class for Cinder Applications using XAML
//
// nb. this file was generated by the Windows 8.1 Store XAML template as DirectXPage, then modified for Cinder

// The copyright in this software is being made available under the BSD License, included below. 
// This software may be subject to other third party and contributor rights, including patent rights, 
// and no such rights are granted under this license.
//
// Copyright (c) 2013, Microsoft Open Technologies, Inc. 
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, 
// are permitted provided that the following conditions are met:
//
// - Redistributions of source code must retain the above copyright notice, 
//   this list of conditions and the following disclaimer.
// - Redistributions in binary form must reproduce the above copyright notice, 
//   this list of conditions and the following disclaimer in the documentation 
//   and/or other materials provided with the distribution.
// - Neither the name of Microsoft Open Technologies, Inc. nor the names of its contributors 
//   may be used to endorse or promote products derived from this software 
//   without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#pragma once

/*

namespaces used

CinderXAML::        all XAML content generated by Windows 8.1 Store/XAML template, then modified for Cinder
                    pages are: App.xaml, CinderPage.xaml (this was the DirectXPage from the template)

DX::                DirectX helper and DeviceResources in the Common/ folder, generated by template

cinder::app::       contains CinderMain class that the application inherits from
cinder::dx::        contains the DirectX drawing methods, see dx.h

*/

/*

    event sequence at startup:
        
    OnVisibilityChanged
    OnSwapChainPanelSizeChanged
    OnCompositionScaleChanged
           
    event sequence on device orientation change:

    OnDisplayContentsInvalidated
    OnDisplayContentsInvalidated
    OnOrientationChanged
    OnDpiChanged
    OnSwapChainPanelSizeChanged

*/


#include "cinder/Cinder.h"

#include "cinder/app/AppImplMswRendererDx.h"

#include "cinder/Vector.h"
#include "cinder/app/MouseEvent.h"
#include "cinder/app/KeyEvent.h"
#include "InputEvent.h"
#include <mutex>
#include <queue>
#include <memory>

using namespace Windows::UI::Core;

// fwd decls
namespace DX {
    class StepTimer;
    class DeviceResources;
    class DeviceRelay;
}

namespace cinder { namespace app {

    class CinderMain
    {
    public:
        CinderMain() : m_timer(nullptr), m_relay(nullptr), m_pipeline_ready(false), m_resize_needed(false), mLastFrameRendered(0) {}
        ~CinderMain();

        // Methods called by XAML via CinderPage
        void setup(const std::shared_ptr<DX::DeviceResources>& deviceResources);
        void CreateWindowSizeDependentResources();

        // pointer
        void OnPointerPressed(Windows::UI::Core::PointerEventArgs^ args);
        void ProcessPointerPressed(Windows::UI::Core::PointerEventArgs^ args);
        void OnPointerMoved(Windows::UI::Core::PointerEventArgs^ args);
        void ProcessPointerMoved(Windows::UI::Core::PointerEventArgs^ args);
        void OnPointerReleased(Windows::UI::Core::PointerEventArgs^ args);
        void ProcessPointerReleased(Windows::UI::Core::PointerEventArgs^ args);


        void OnKeyDown(Windows::UI::Core::KeyEventArgs^ args);
        void ProcessOnKeyDown(Windows::UI::Core::KeyEventArgs^ args);
        void OnKeyUp(Windows::UI::Core::KeyEventArgs^ args);
        void ProcessOnKeyUp(Windows::UI::Core::KeyEventArgs^ args);
        void OnPointerWheelChanged(Windows::UI::Core::PointerEventArgs^ args);

        // rendering
        void StartRenderLoop();
        void StopRenderLoop();

        int GetFrameCount() const;

        Concurrency::critical_section& GetCriticalSection() { return m_criticalSection; }

        // share the DX/D3D/D2D objects with Cinder
        void shareWithCinder();

        // IDeviceNotify
        virtual void OnDeviceLost();
        virtual void OnDeviceRestored();

        // singleton
        static CinderMain*  getInstance() { return sInstance; }

    private:

        // singleton enforcement:
        CinderMain(CinderMain const &);
        void operator=(CinderMain const &);

        // ptr to Cinder renderer for DirectX, owned by Cinder
        cinder::app::AppImplMswRendererDx *mRenderer;

        bool    m_pipeline_ready;
        bool    m_resize_needed;
        uint32  mLastFrameRendered;

        // singleton instance
        static CinderMain*  sInstance;

        // relay for device lost/restored events from XAML
        DX::DeviceRelay* m_relay;

        void ProcessInput();
        void Update();
        bool Render();

        // Cached pointer to device resources.
        std::shared_ptr<DX::DeviceResources> m_deviceResources;

        // optional: frame rate display
        // std::unique_ptr<SampleFpsTextRenderer> m_fpsTextRenderer;

        Windows::Foundation::IAsyncAction^ m_renderLoopWorker;
        Concurrency::critical_section m_criticalSection;

        // Rendering loop timer.
        DX::StepTimer* m_timer;

        // input event queue
        std::queue<std::shared_ptr<InputEvent>> mInputEvents;
        std::mutex mMutex;
    };

} }

// eof
