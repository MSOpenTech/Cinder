diff --git a/include/cinder/app/AppImplMswRendererDx.h b/include/cinder/app/AppImplMswRendererDx.h
index 7fc4e3d..8c52798 100644
--- a/include/cinder/app/AppImplMswRendererDx.h
+++ b/include/cinder/app/AppImplMswRendererDx.h
@@ -41,7 +41,23 @@
 
 #if defined( CINDER_WINRT_XAML )
 #include <D3D11_2.h>
-// class cinder::app::AppBasicXAML;
+#include <d2d1_2.h>
+#include <DirectXMath.h>
+
+using namespace D2D1;
+using namespace DirectX;
+
+/*
+namespace cinder { namespace dx {
+    // Provides an interface for an application that owns DeviceResources to be notified of the device being lost or created.
+	interface IDeviceNotify
+	{
+		virtual void OnDeviceLost() = 0;
+		virtual void OnDeviceRestored() = 0;
+	};
+}}
+*/
+
 #endif
 
 namespace cinder { namespace dx {
@@ -51,10 +67,6 @@
 namespace cinder { namespace app {
 
 class AppImplMswRendererDx : public AppImplMswRenderer {
-// zv6
-#if defined( CINDER_WINRT_XAML )
-//    friend class cinder::app::AppBasicXAML;
-#endif
 
  public:
  	struct LightData
@@ -144,6 +156,48 @@
 	ID3D11DeviceContext2 *mDeviceContext;
 	IDXGISwapChain1 *mSwapChain;
 	ID3D11Device2 *md3dDevice;
+
+    // zv
+	// Cached reference to the XAML panel.
+	Windows::UI::Xaml::Controls::SwapChainPanel^    m_swapChainPanel;
+    // SwapChainBackgroundPanel (Windows 8.0) ?
+
+	// Cached device properties.
+	D3D_FEATURE_LEVEL								m_d3dFeatureLevel;
+	Windows::Foundation::Size						m_d3dRenderTargetSize;
+	Windows::Foundation::Size						m_outputSize;
+	Windows::Foundation::Size						m_logicalSize;
+	Windows::Graphics::Display::DisplayOrientations	m_nativeOrientation;
+	Windows::Graphics::Display::DisplayOrientations	m_currentOrientation;
+	float											m_dpi;
+	float											m_compositionScaleX;
+	float											m_compositionScaleY;
+
+	// Transforms used for display orientation.
+	D2D1::Matrix3x2F	m_orientationTransform2D;
+	DirectX::XMFLOAT4X4	m_orientationTransform3D;
+
+    // zv
+    // see DeviceResources.cpp:95
+	// The IDeviceNotify can be held directly as it owns the DeviceResources.
+	// IDeviceNotify* m_deviceNotify;
+
+    // zv
+    // not sure if D2D & Dwrite are needed
+    // these are the newer ComPtrs:
+    /*
+		// Direct2D drawing components.
+		Microsoft::WRL::ComPtr<ID2D1Factory2>		m_d2dFactory;
+		Microsoft::WRL::ComPtr<ID2D1Device1>		m_d2dDevice;
+		Microsoft::WRL::ComPtr<ID2D1DeviceContext1>	m_d2dContext;
+		Microsoft::WRL::ComPtr<ID2D1Bitmap1>		m_d2dTargetBitmap;
+
+		// DirectWrite drawing components.
+		Microsoft::WRL::ComPtr<IDWriteFactory2>		m_dwriteFactory;
+		Microsoft::WRL::ComPtr<IWICImagingFactory2>	m_wicFactory;
+    */
+
+
 #elif defined( CINDER_WINRT ) || ( _WIN32_WINNT >= 0x0602 )
 	ID3D11DeviceContext1 *mDeviceContext;
 	IDXGISwapChain1 *mSwapChain;
diff --git a/include/cinder/app/AppImplMswRendererDx.h b/include/cinder/app/AppImplMswRendererDx.h
index 7fc4e3d..8c52798 100644
--- a/include/cinder/app/AppImplMswRendererDx.h
+++ b/include/cinder/app/AppImplMswRendererDx.h
@@ -41,7 +41,23 @@
 
 #if defined( CINDER_WINRT_XAML )
 #include <D3D11_2.h>
-// class cinder::app::AppBasicXAML;
+#include <d2d1_2.h>
+#include <DirectXMath.h>
+
+using namespace D2D1;
+using namespace DirectX;
+
+/*
+namespace cinder { namespace dx {
+    // Provides an interface for an application that owns DeviceResources to be notified of the device being lost or created.
+	interface IDeviceNotify
+	{
+		virtual void OnDeviceLost() = 0;
+		virtual void OnDeviceRestored() = 0;
+	};
+}}
+*/
+
 #endif
 
 namespace cinder { namespace dx {
@@ -51,10 +67,6 @@
 namespace cinder { namespace app {
 
 class AppImplMswRendererDx : public AppImplMswRenderer {
-// zv6
-#if defined( CINDER_WINRT_XAML )
-//    friend class cinder::app::AppBasicXAML;
-#endif
 
  public:
  	struct LightData
@@ -144,6 +156,48 @@
 	ID3D11DeviceContext2 *mDeviceContext;
 	IDXGISwapChain1 *mSwapChain;
 	ID3D11Device2 *md3dDevice;
+
+    // zv
+	// Cached reference to the XAML panel.
+	Windows::UI::Xaml::Controls::SwapChainPanel^    m_swapChainPanel;
+    // SwapChainBackgroundPanel (Windows 8.0) ?
+
+	// Cached device properties.
+	D3D_FEATURE_LEVEL								m_d3dFeatureLevel;
+	Windows::Foundation::Size						m_d3dRenderTargetSize;
+	Windows::Foundation::Size						m_outputSize;
+	Windows::Foundation::Size						m_logicalSize;
+	Windows::Graphics::Display::DisplayOrientations	m_nativeOrientation;
+	Windows::Graphics::Display::DisplayOrientations	m_currentOrientation;
+	float											m_dpi;
+	float											m_compositionScaleX;
+	float											m_compositionScaleY;
+
+	// Transforms used for display orientation.
+	D2D1::Matrix3x2F	m_orientationTransform2D;
+	DirectX::XMFLOAT4X4	m_orientationTransform3D;
+
+    // zv
+    // see DeviceResources.cpp:95
+	// The IDeviceNotify can be held directly as it owns the DeviceResources.
+	// IDeviceNotify* m_deviceNotify;
+
+    // zv
+    // not sure if D2D & Dwrite are needed
+    // these are the newer ComPtrs:
+    /*
+		// Direct2D drawing components.
+		Microsoft::WRL::ComPtr<ID2D1Factory2>		m_d2dFactory;
+		Microsoft::WRL::ComPtr<ID2D1Device1>		m_d2dDevice;
+		Microsoft::WRL::ComPtr<ID2D1DeviceContext1>	m_d2dContext;
+		Microsoft::WRL::ComPtr<ID2D1Bitmap1>		m_d2dTargetBitmap;
+
+		// DirectWrite drawing components.
+		Microsoft::WRL::ComPtr<IDWriteFactory2>		m_dwriteFactory;
+		Microsoft::WRL::ComPtr<IWICImagingFactory2>	m_wicFactory;
+    */
+
+
 #elif defined( CINDER_WINRT ) || ( _WIN32_WINNT >= 0x0602 )
 	ID3D11DeviceContext1 *mDeviceContext;
 	IDXGISwapChain1 *mSwapChain;
