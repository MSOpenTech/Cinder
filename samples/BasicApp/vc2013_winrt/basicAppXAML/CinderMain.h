#pragma once

// nb. this file was generated by the Windows 8.1 Store XAML template as DirectXPage, then modified for Cinder

/*

namespaces used

basicAppXAML::      all XAML content generated by Windows 8.1 Store/XAML template
                    pages are: App.xaml, CinderPage.xaml (this was the DirectXPage from the template)

DX::                DirectX helper and DeviceResources in the Common/ folder, generated by template

cinder::app::       contains CinderMain class that the application inherits from
cinder::dx::        contains the DirectX drawing methods, see dx.h

*/


#include "cinder/Cinder.h"

#include "cinder/app/AppImplMswRendererDx.h"

#include "cinder/Vector.h"
#include "cinder/app/MouseEvent.h"
#include "cinder/app/KeyEvent.h"

using namespace Windows::UI::Core;

// fwd decls
namespace DX {
    class StepTimer;
    class DeviceResources;
}

namespace cinder { namespace app {

    class CinderMain
    {
    public:
        CinderMain() : m_timer(nullptr) {}
        ~CinderMain();

        // Cinder methods (app will inherit these)
        virtual void mouseDrag(MouseEvent event) {}
        virtual void keyDown(KeyEvent event) {}
        virtual void update() {}
        virtual void draw() {}
        virtual void setup() {}     // nb. as in Processing

        // setFullScreen: n/a: a Windows RT store app is always full screen
        //
        // zv todo multitouch: TBD
        // void enableMultiTouch( bool enable = true ) { mEnableMultiTouch = enable; }
        // 
        // cursor: does not apply
        //
        // framerate: changing it is useful, not implemented now
        //
        // quit: TBD, stop the RenderLoop
        //  nb. WinRT OS kills the app when it needs to, otherwise the app always runs
        //  nb. RenderLoop is automatically paused when the app is not visible, by XAML framework


        // Methods called by XAML via CinderPage
        void setup(const std::shared_ptr<DX::DeviceResources>& deviceResources);
        void CreateWindowSizeDependentResources();

        // pointer
        void StartTracking() {  m_tracking = true; }
        void TrackingUpdate(PointerEventArgs^ e);
        void StopTracking() { m_tracking = false; }
        bool IsTracking() { return m_tracking; }

        // rendering
        void StartRenderLoop();
        void StopRenderLoop();
        Concurrency::critical_section& GetCriticalSection() { return m_criticalSection; }

        cinder::app::AppImplMswRendererDx *ren;

        // share the DX/D3D/D2D objects with Cinder
        void shareWithCinder();

        // IDeviceNotify
        virtual void OnDeviceLost();
        virtual void OnDeviceRestored();

    private:        
        bool    m_tracking;
        bool    m_pipeline_ready;

        void ProcessInput();
        void Update();
        bool Render();

        // Cached pointer to device resources.
        std::shared_ptr<DX::DeviceResources> m_deviceResources;

        // optional: frame rate display
        // std::unique_ptr<SampleFpsTextRenderer> m_fpsTextRenderer;

        Windows::Foundation::IAsyncAction^ m_renderLoopWorker;
        Concurrency::critical_section m_criticalSection;

        // Rendering loop timer.
        DX::StepTimer* m_timer;
    };

} }

// eof
