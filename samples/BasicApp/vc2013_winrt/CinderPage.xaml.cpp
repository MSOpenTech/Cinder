//
// CinderPage.xaml.cpp
// Implementation of the CinderPage class.
// nb. this file was generated by the Windows 8.1 Store XAML template, then modified for Cinder
//

// The copyright in this software is being made available under the BSD License, included below. 
// This software may be subject to other third party and contributor rights, including patent rights, 
// and no such rights are granted under this license.
//
// Copyright (c) 2013, Microsoft Open Technologies, Inc. 
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, 
// are permitted provided that the following conditions are met:
//
// - Redistributions of source code must retain the above copyright notice, 
//   this list of conditions and the following disclaimer.
// - Redistributions in binary form must reproduce the above copyright notice, 
//   this list of conditions and the following disclaimer in the documentation 
//   and/or other materials provided with the distribution.
// - Neither the name of Microsoft Open Technologies, Inc. nor the names of its contributors 
//   may be used to endorse or promote products derived from this software 
//   without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// pch off
// #include "pch.h"
#include <wrl.h>
#include <wrl/client.h>
#include <d3d11_2.h>
#include <d2d1_2.h>
#include <d2d1effects_1.h>
#include <dwrite_2.h>
#include <wincodec.h>
#include <DirectXColors.h>
#include <DirectXMath.h>
#include <memory>
#include <agile.h>
#include <concrt.h>
#include <collection.h>
#include "App.xaml.h"
#include "CinderPage.xaml.h"

#include "cinder/app/winrt/xaml/CinderMain.h"

// zv for debug
#include "cinder/app/winrt/cdebug.h"


using namespace CinderXAML;

using namespace Platform;
using namespace Windows::Foundation;
using namespace Windows::Foundation::Collections;
using namespace Windows::Graphics::Display;
using namespace Windows::System;
using namespace Windows::System::Threading;
using namespace Windows::UI::Core;
using namespace Windows::UI::Input;
using namespace Windows::UI::Xaml;
using namespace Windows::UI::Xaml::Controls;
using namespace Windows::UI::Xaml::Controls::Primitives;
using namespace Windows::UI::Xaml::Data;
using namespace Windows::UI::Xaml::Input;
using namespace Windows::UI::Xaml::Media;
using namespace Windows::UI::Xaml::Navigation;
using namespace concurrency;



CinderPage::CinderPage():
	m_windowVisible(true),
    m_keyHandled(false),
	m_coreInput(nullptr)
{
	InitializeComponent();

	// Register event handlers for page lifecycle.
	CoreWindow^ window = Window::Current->CoreWindow;

	window->VisibilityChanged +=
		ref new TypedEventHandler<CoreWindow^, VisibilityChangedEventArgs^>(this, &CinderPage::OnVisibilityChanged);

	DisplayInformation^ currentDisplayInformation = DisplayInformation::GetForCurrentView();

	currentDisplayInformation->DpiChanged +=
		ref new TypedEventHandler<DisplayInformation^, Object^>(this, &CinderPage::OnDpiChanged);

	currentDisplayInformation->OrientationChanged +=
		ref new TypedEventHandler<DisplayInformation^, Object^>(this, &CinderPage::OnOrientationChanged);

	DisplayInformation::DisplayContentsInvalidated +=
		ref new TypedEventHandler<DisplayInformation^, Object^>(this, &CinderPage::OnDisplayContentsInvalidated);

	swapChainPanel->CompositionScaleChanged += 
		ref new TypedEventHandler<SwapChainPanel^, Object^>(this, &CinderPage::OnCompositionScaleChanged);

	swapChainPanel->SizeChanged +=
		ref new SizeChangedEventHandler(this, &CinderPage::OnSwapChainPanelSizeChanged);

    Window::Current->CoreWindow->KeyDown +=
        ref new TypedEventHandler<CoreWindow^, KeyEventArgs^>(this, &CinderPage::OnKeyDown);

    Window::Current->CoreWindow->PointerWheelChanged +=
        ref new TypedEventHandler<CoreWindow^, PointerEventArgs^>(this, &CinderPage::OnPointerWheelChanged);

    Window::Current->CoreWindow->KeyUp +=
        ref new TypedEventHandler<CoreWindow^, KeyEventArgs^>(this, &CinderPage::OnKeyUp);

	// Disable all pointer visual feedback for better performance when touching.
	auto pointerVisualizationSettings = PointerVisualizationSettings::GetForCurrentView();
	pointerVisualizationSettings->IsContactFeedbackEnabled = false; 
	pointerVisualizationSettings->IsBarrelButtonFeedbackEnabled = false;

	// At this point we have access to the device. 
	// We can create the device-dependent resources.
	m_deviceResources = std::make_shared<DX::DeviceResources>();
	m_deviceResources->SetSwapChainPanel(swapChainPanel);

	// Register our SwapChainPanel to get independent input pointer events
    // nb.  accepting input events on the bg thread appears to be REQUIRED for XAML,
    //      see docs on CreateCoreIndependentInputSource
    auto workItemHandler = ref new WorkItemHandler([this] (IAsyncAction ^)
	{
		// The CoreIndependentInputSource will raise pointer events for the specified device types on whichever thread it's created on.
		m_coreInput = swapChainPanel->CreateCoreIndependentInputSource(
			Windows::UI::Core::CoreInputDeviceTypes::Mouse |
			Windows::UI::Core::CoreInputDeviceTypes::Touch |
			Windows::UI::Core::CoreInputDeviceTypes::Pen
			);

		// Register for pointer events, which will be raised on the background thread.
		m_coreInput->PointerPressed += ref new TypedEventHandler<Object^, PointerEventArgs^>(this, &CinderPage::OnPointerPressed);
		m_coreInput->PointerMoved += ref new TypedEventHandler<Object^, PointerEventArgs^>(this, &CinderPage::OnPointerMoved);
		m_coreInput->PointerReleased += ref new TypedEventHandler<Object^, PointerEventArgs^>(this, &CinderPage::OnPointerReleased);

		// Begin processing input messages as they're delivered.
		m_coreInput->Dispatcher->ProcessEvents(CoreProcessEventsOption::ProcessUntilQuit);
	});

	// Run task on a dedicated high priority background thread.
	m_inputLoopWorker = ThreadPool::RunAsync(workItemHandler, WorkItemPriority::High, WorkItemOptions::TimeSliced);

    // create and setup the CinderMain base class instance
    m_cinder = new cinder::app::CinderMain;

	// setup DirectX & initialize Cinder
    m_cinder->setup(m_deviceResources);

    m_cinder->StartRenderLoop();
}

CinderPage::~CinderPage()
{
	// Stop rendering and processing events on destruction.
	m_cinder->StopRenderLoop();
	m_coreInput->Dispatcher->StopProcessEvents();
}

// Saves the current state of the app for suspend and terminate events.
void CinderPage::SaveInternalState(IPropertySet^ state)
{
	critical_section::scoped_lock lock(m_cinder->GetCriticalSection());
	m_deviceResources->Trim();

	// Stop rendering when the app is suspended.
	m_cinder->StopRenderLoop();

	// Put code to save app state here.
}

// Loads the current state of the app for resume events.
void CinderPage::LoadInternalState(IPropertySet^ state)
{
	// Put code to load app state here.

	// Start rendering when the app is resumed.
	m_cinder->StartRenderLoop();
}

// Window event handlers.

void CinderPage::OnVisibilityChanged(CoreWindow^ sender, VisibilityChangedEventArgs^ args)
{
    TCC( "OnVisibilityChanged\n" );

	m_windowVisible = args->Visible;
	if (m_windowVisible)
	{
		m_cinder->StartRenderLoop();
	}
	else
	{
		m_cinder->StopRenderLoop();
	}
}

// DisplayInformation event handlers.

void CinderPage::OnDpiChanged(DisplayInformation^ sender, Object^ args)
{
    TCC( "OnDpiChanged\n" );

	critical_section::scoped_lock lock(m_cinder->GetCriticalSection());
	m_deviceResources->SetDpi(sender->LogicalDpi);
	m_cinder->CreateWindowSizeDependentResources();
}

void CinderPage::OnOrientationChanged(DisplayInformation^ sender, Object^ args)
{
    TCC( "OnOrientationChanged\n" );

	critical_section::scoped_lock lock(m_cinder->GetCriticalSection());
	m_deviceResources->SetCurrentOrientation(sender->CurrentOrientation);
	m_cinder->CreateWindowSizeDependentResources();
}


void CinderPage::OnDisplayContentsInvalidated(DisplayInformation^ sender, Object^ args)
{
    TCC( "OnDisplayContentsInvalidated\n" );

    critical_section::scoped_lock lock(m_cinder->GetCriticalSection());
	m_deviceResources->ValidateDevice();
}

// Called when the app bar button is clicked.
void CinderPage::AppBarButton_Click(Object^ sender, RoutedEventArgs^ e)
{
	// Use the app bar if it is appropriate for your app. Design the app bar, 
	// then fill in event handlers (like this one).
}

void CinderPage::OnPointerPressed(Object^ sender, PointerEventArgs^ e)
{
	// When the pointer is pressed begin tracking the pointer movement.
    m_cinder->OnPointerPressed(e);
}

void CinderPage::OnPointerMoved(Object^ sender, PointerEventArgs^ e)
{
    m_cinder->OnPointerMoved(e);

}

void CinderPage::OnPointerReleased(Object^ sender, PointerEventArgs^ e)
{
    m_cinder->OnPointerReleased(e);

}



void CinderPage::OnKeyUp(CoreWindow^ sender, KeyEventArgs^ args)
{
 
    // check if keypress was already handled
    if (m_keyHandled) {
        m_keyHandled = false;
        return;
    }
    m_cinder->OnKeyUp(args);
}

void CinderPage::OnKeyDown(CoreWindow^ sender, KeyEventArgs^ args)
{
    m_cinder->OnKeyDown(args);

}

void CinderPage::OnPointerWheelChanged(CoreWindow^ sender, PointerEventArgs^ args)
{
    int direction = args->CurrentPoint->Properties->MouseWheelDelta;
}




// nb. this event fires (2) at initialization
void CinderPage::OnCompositionScaleChanged(SwapChainPanel^ sender, Object^ args)
{
    TCC( "OnCompositionScaleChanged\n" );

	critical_section::scoped_lock lock(m_cinder->GetCriticalSection());
	m_deviceResources->SetCompositionScale(sender->CompositionScaleX, sender->CompositionScaleY);
	m_cinder->CreateWindowSizeDependentResources();
}

// nb. this event fires (1,3) at initialization
void CinderPage::OnSwapChainPanelSizeChanged(Object^ sender, SizeChangedEventArgs^ e)
{
    TCC( "OnSwapChainPanelSizeChanged\n" );

	critical_section::scoped_lock lock(m_cinder->GetCriticalSection());
	m_deviceResources->SetLogicalSize(e->NewSize);
	m_cinder->CreateWindowSizeDependentResources();
}
